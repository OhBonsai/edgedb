#
# This source file is part of the EdgeDB open source project.
#
# Copyright 2016-present MagicStack Inc. and the EdgeDB authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

## Fundamental polymorphic functions


# std::len
# --------

CREATE FUNCTION
std::len(str: std::str) -> std::int64
{
    FROM SQL $$
    SELECT char_length("str")::bigint
    $$;
};


CREATE FUNCTION
std::len(bytes: std::bytes) -> std::int64
{
    FROM SQL $$
    SELECT length("bytes")::bigint
    $$;
};


CREATE FUNCTION
std::len(array: array<anytype>) -> std::int64
{
    FROM SQL $$
    SELECT COALESCE(array_length("array", 1), 0)::bigint
    $$;
};


# std::sum
# --------

CREATE FUNCTION
std::sum(s: SET OF std::decimal) -> std::decimal
{
    SET initial_value := 0;
    FROM SQL FUNCTION 'sum';
};


CREATE FUNCTION
std::sum(s: SET OF std::int64) -> std::decimal
{
    SET initial_value := 0;
    FROM SQL FUNCTION 'sum';
};


CREATE FUNCTION
std::sum(s: SET OF std::float32) -> std::float32
{
    SET initial_value := 0;
    FROM SQL FUNCTION 'sum';
};


CREATE FUNCTION
std::sum(s: SET OF std::float64) -> std::float64
{
    SET initial_value := 0;
    FROM SQL FUNCTION 'sum';
};


# std::count
# ----------

CREATE FUNCTION
std::count(s: SET OF anytype) -> std::int64
{
    SET initial_value := 0;
    FROM SQL FUNCTION 'count';
};


# std::random
# -----------

CREATE FUNCTION
std::random() -> std::float64
{
    FROM SQL FUNCTION 'random';
};


# polymorphic formatting functions

# std::str
# --------
CREATE FUNCTION
std::str(dt: std::datetime, fmt: OPTIONAL str={}) -> std::str
{
    FROM SQL $$
    SELECT (
        CASE WHEN fmt IS NULL THEN
            dt::text
        ELSE
            to_char(dt, fmt)
        END
    )
    $$;
};


CREATE FUNCTION
std::str(d: std::date, fmt: OPTIONAL str={}) -> std::str
{
    FROM SQL $$
    SELECT (
        CASE WHEN fmt IS NULL THEN
            d::text
        ELSE
            to_char(d, fmt)
        END
    )
    $$;
};


# There's no `to_char` taking time. Blindly adding a date (such as
# current_date() to the time would allow formatting for datetime to
# leak.


# There's no good safe default for all possible timedeltas and some
# timedeltas cannot be formatted without non-trivial conversions (e.g.
# 7,000 days).


CREATE FUNCTION
std::str(i: std::int64, fmt: OPTIONAL str={}) -> std::str
{
    FROM SQL $$
    SELECT (
        CASE WHEN fmt IS NULL THEN
            i::text
        ELSE
            to_char(i, fmt)
        END
    )
    $$;
};


CREATE FUNCTION
std::str(f: std::float64, fmt: OPTIONAL str={}) -> std::str
{
    FROM SQL $$
    SELECT (
        CASE WHEN fmt IS NULL THEN
            f::text
        ELSE
            to_char(f, fmt)
        END
    )
    $$;
};


CREATE FUNCTION
std::str(d: std::decimal, fmt: OPTIONAL str={}) -> std::str
{
    FROM SQL $$
    SELECT (
        CASE WHEN fmt IS NULL THEN
            d::text
        ELSE
            to_char(d, fmt)
        END
    )
    $$;
};
